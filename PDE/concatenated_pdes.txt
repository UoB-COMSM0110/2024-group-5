Ability.pde 
class Ability extends MoveObject{
  

}
****End of Ability.pde****
AbilityBox.pde 
public class AbilityBox extends FixedObject implements Serializable{
   
   public AbilityBox(){
     PImage image = loadImage("abilityBox.png");
     this.setImage(image);
   }
}
****End of AbilityBox.pde****
Asteriods.pde 
class Asteriods extends MoveObject{
  public int imageCount;
  public String[] imageUrls;
  public PImage[] images;
  public int asteriodCount;
  public int[][] topImagesPos;
  public int[][] botImagesPos;
  public int[][] topImageSize;
  public int[][] botImageSize;
  public int range;
  
  public Asteriods(int imageCount){
    imageUrls = new String[imageCount];
    images = new PImage[imageCount];
    for(int i=0;i<imageCount;i++){
      imageUrls[i] = "Asteroid-Base .png";
    }
    for(int i=0;i<imageCount;i++){
      images[i] = loadImage(imageUrls[i]);
    }
    setRange(300);
    setAsteriodCount(10);
    topImagesPos = new int[asteriodCount][2];
    botImagesPos = new int[asteriodCount][2]; 
    setTopImagesPos();
    setBotImagesPos();
    setImageSize();
    speed = 1;
  }
  
  
  public void setAsteriodCount(int asteriodCount){
    this.asteriodCount = asteriodCount;
  }
  
  public void setImageSize(){
    topImageSize = new int[asteriodCount][2];
    botImageSize = new int[asteriodCount][2];
    for(int i=0;i<asteriodCount;i++){
      topImageSize[i][0] = 100;
      topImageSize[i][1] = 100;
      botImageSize[i][0] = 100;
      botImageSize[i][1] = 100;
    }
  }
  
  public void setRange(int range){
    this.range = range;
  }
  
  public void setTopImagesPos(){
    for(int i=0;i<asteriodCount;i++){
      topImagesPos[i][0] = width+(int)random(width)-100;
      topImagesPos[i][1] = (int)random(range)-100;
    }  
  }
  
  public void setBotImagesPos(){
    for(int i=0;i<asteriodCount;i++){
      botImagesPos[i][0] = width+(int)random(width)-100;
      botImagesPos[i][1] = height-range+(int)random(range)-50;
    }  
  }
 
  
  @Override
  public void move(){
    for(int i=0;i<asteriodCount;i++){
      topImagesPos[i][0] -= speed; 
    } 
    
    for(int i=0;i<asteriodCount;i++){
      botImagesPos[i][0] -= speed;
    }  
  }
  
  
  public boolean isOutOfBound(int x){
     return x < -100;
  }
  
  
}
****End of Asteriods.pde****
AsteroidBelts.pde 
  class AsteroidBelts extends MoveObject{
    public int imageCount;
    public String[] imageUrls;
    public PImage[] images;
    public int asteroidCount;
    public int[][] topImagesPos;
    public int[][] botImagesPos;
    private int range;
    public final int imgWidth;
    public final int imgHeight;
    private int minRange;
    
    
    public AsteroidBelts(int imageCount, int range){
      imageUrls = new String[imageCount];
      images = new PImage[imageCount];
      for(int i=0;i<imageCount;i++){
        imageUrls[i] = "asteriodMiddle.png";
      }
      for(int i=0;i<imageCount;i++){
        images[i] = loadImage(imageUrls[i]);
      }
      imgWidth = 50;
      imgHeight = 50;
      setRange(50);
      setAsteroidCount(40);
      topImagesPos = new int[asteroidCount][2];
      botImagesPos = new int[asteroidCount][2]; 
      createBelts();
      speed = 10;
      minRange = 0;
    }
    
    
    public void setAsteroidCount(int asteroidCount){
      this.asteroidCount = asteroidCount;
    }
    
    
    public void setRange(int range){
      this.range = range;
    }
    
    public void createBelts() {
       for(int i = 0; i < asteroidCount; i++){
        topImagesPos[i][0] = (int)random(width);
        topImagesPos[i][1] = (int)random(range);
        botImagesPos[i][0] = (int)random(width);
        botImagesPos[i][1] = (height - (int)random(range)) - 50;
      } 
    }
     
     public void moveAsteroid(int i ){
       topImagesPos[i][0] -= speed;
       botImagesPos[i][0] -= speed;
    }
    
    
    public boolean isOutOfBound(int x){
       return x < -50;
    }
    
    public int getRange() {
      return this.range;
    }
    
    public int getMinRange() {return this.minRange;}
    
    public void setMinRange(int x) {this.minRange = x;}
  }
****End of AsteroidBelts.pde****
Background.pde 
public class BackgroundImage{
  public int background_start_cur_X = 0;
  public int background_start_cur_Y = 0;
  public float speedX = 2.5;
  public float speedY = 0;
  public BackgroundImage(){
    
  }
}
****End of Background.pde****
BackgroundGif.pde 
public class BackgroundGif{

 
  public BackgroundGif(){
   
  }
 
}
****End of BackgroundGif.pde****
Bgm.pde 
public class Bgm{
  public static final String bgmLevelBegin = "space1.mp3";
  public static final String bgmLevelMap1 = "bgmLevelMap1.mp3";
  public static final String bgmBullet1 = "bullet1.mp3";
  public static final String bgmStart = "start.wav";
  public static final String bgmClick = "click.wav";
}

void bgmStart(Level level){
  if(level == Level.LEVEL_START){
    if(gameStarted){
      if(!playerStart.isPlaying()){
          playerStart.play();
      }
    }
  }

  if(isAllDone){
    if(level == Level.LEVEL_BEGIN){
      if(!playerLevelBegin.isPlaying()){
          playerLevelBegin.rewind();
          playerLevelBegin.play();
      }
    }else{
      playerLevelBegin.pause();
    }
    
    if(level == Level.LEVEL_SET){
      if(!playerLevelSet.isPlaying()){
          playerLevelSet.rewind();
          playerLevelSet.play();
      }
    }else{
      playerLevelSet.pause();
    }
    
    //if(level == Level.LEVEL_MAP1 || level == Level.LEVEL_MAP2){
    //  if(!playerLevelMap1.isPlaying()){
    //      playerLevelMap1.rewind();
    //      playerLevelMap1.play();
    //  }
    //}
    //else{
    //  playerLevelMap1.pause();
    //}
  }
  //to do
}

public void setVolume(float diff){
    playerLevelBegin.setGain(diff);
    playerLevelSet.setGain(diff);
    playerLevelMap1.setGain(diff); 
    playerBullet1.setGain(diff);
    playerStart.setGain(diff);
    playerClick.setGain(diff);
}
****End of Bgm.pde****
ButtonImage.pde 
public class ButtonImage{
  public final PImage BTN_START;  //start button
  public final PImage BTN_SET;  //set button
  public final PImage BTN_SETTAG;
  public final PImage cursor;
  public final PImage BTN_MAINMENU; 
  public boolean HOVER_BTN_START;
  public boolean HOVER_BTN_SET;
  public ButtonImage(){
    BTN_START = loadImage("btn_start.png");
    BTN_SET = loadImage("btn_set.png");
    cursor = loadImage("cursor.png");
    BTN_SETTAG= loadImage("btn_setIcon.png");
    BTN_MAINMENU = loadImage("mainMenu.png");
    HOVER_BTN_START = false;
    HOVER_BTN_SET = false;
  }
}
****End of ButtonImage.pde****
Client.pde 
import websockets.*;
import java.net.*;

final class Client{
   WebsocketClient wsc;
   public Client(){
     
   }
    
   public void connect(PApplet miracle){
      wsc= new WebsocketClient(miracle, "ws://localhost:8025/john");
   }
   public void send(){
        if(millis()>now+100){
          ProtocolDataFormat protocolDataFormat = new ProtocolDataFormat();
          protocolDataFormat.player = player1;
          protocolDataFormat.ip = ip;
          JSONObject msgFromClient = protocolDataFormat.toJSONObject();
          wsc.sendMessage(msgFromClient.toString());
        }
        now=millis();
   }
   
}

    
    public void webSocketEvent(String msg){
      synchronized(this){
        println("getMessage from server");
        try{
        String[] msgClients = msg.split(","); 
        String msgFromAnotherClient = "";
        for(String s:msgClients){
          if(ip!=msgToProtocolDataFormat(s).ip){
            msgFromAnotherClient = s;
            break;
          }
        }
        protocolDataFormat = msgToProtocolDataFormat(msgFromAnotherClient);
        player2 = protocolDataFormat.player; 
        }catch(Exception e){
           e.printStackTrace();
        }
      }
    }
    
    ProtocolDataFormat msgToProtocolDataFormat(String msgFromServer){
      JSONUtilizer tool = new JSONUtilizer();
      ProtocolDataFormat protocolDataFormat = new ProtocolDataFormat();
      JSONObject obj = JSONObject.parse(msgFromServer);
      JSONObject player = obj.getJSONObject("player");
      Player player2 = tool.JSONToPlayer(player);
      protocolDataFormat.player = player2;
      return protocolDataFormat;
    }
    
    
****End of Client.pde****
Difficulty.pde 
enum Difficulty{
  EASY,
  NORMAL,
  HARD
}
****End of Difficulty.pde****
DrawButton.pde 
void drawButton(Level level){
  switch(level){
    case LEVEL_BEGIN:
      drawButtonBegin();
      break;
    //to do
  }
}

void drawButtonBegin(){
  imageMode(CENTER);
  image(buttonImage.BTN_MAINMENU,width/2,height/1.4,300,300);
  
  /*
    old UI
  */
  
  //set hover styles
  //if(isMouseInButtonStart()){
  //  buttonImage.HOVER_BTN_START = true;
  //}else{
  //  buttonImage.HOVER_BTN_START = false;
  //}
  
  //if(isMouseInButtonSet()){
  //  buttonImage.HOVER_BTN_SET = true;
  //}else{
  //  buttonImage.HOVER_BTN_SET = false;
  //}
  
  //if(buttonImage.HOVER_BTN_START){
  //  tint(150,100);
  //}else{
  //  noTint();
  //}
  //image(buttonImage.BTN_START, width/2, height/1.5, buttonImage.BTN_START.width/4, buttonImage.BTN_START.height/5);
  
  //if(buttonImage.HOVER_BTN_SET){
  //  tint(150,100);
  //}else{
  //  noTint();
  //}
  //image(buttonImage.BTN_SET, width/2, height/1.5+gameConstant.BUTTON_SPACE, buttonImage.BTN_START.width/4, buttonImage.BTN_START.height/5);
  //noTint();
}
****End of DrawButton.pde****
Environment.pde 
abstract class Environment{
    
  void change(int flag, PImage img){
  
  }
}
****End of Environment.pde****
Explode.pde 
class Explode{
  PImage[] images;
  int curIndx = 0;
  int lastChangeTime = millis();
  boolean isVisible = true;
  boolean isEnd = false;
  PGraphics buffer = createGraphics(width, height);
  public Explode(){
     images = new PImage[9];
    for(int i=0;i<9;i++){
    images[i] = loadImage("explode"+(i+1)+".png");
    }
  }
  
  public void drawExplode(float frame,int posX,int posY){
     if(isVisible){
        buffer.beginDraw();        
        buffer.imageMode(CENTER);
        buffer.image(images[curIndx],posX,posY,150,150);
        buffer.endDraw();
        image(buffer,0,0);
        buffer.clear();
     }
     if(millis()-lastChangeTime-frame>=0){
       lastChangeTime = millis();
       curIndx = curIndx+1;
       if(curIndx+1==9){
         isVisible = false;
         isEnd = true;
       }
     }
  }
  
}
****End of Explode.pde****
FastCard.pde 
public class FastCard extends MoveObject{
    public int asteroidRange;
    public FastCard(){
      image = loadImage("unknownBox.png");
      speed = 5;
      asteroidRange = 100;
    }
    
    @Override
    public void move(){
      if(isOutOfBound()||!isVisiable){
        isVisiable = true;
        curX = width+(int)random(1000);
        curY = (int)random(this.asteroidRange, height-this.asteroidRange-100);
      }
      curX-=speed;
    }
    
    @Override
    public boolean isOutOfBound(){
      if(curX<0){
        return true;
      }
      return false;
    }
   
}
****End of FastCard.pde****
FixedObject.pde 
abstract class FixedObject implements Serializable{
  public PImage image;
  public PImage[] images;
  public int curX;
  public int curY;
  public boolean isVisiable = false;

    
  public JSONObject toJSONObject(){
    JSONObject obj = new JSONObject();
    obj.setInt("curX",curX);
    obj.setInt("curY",curY);
    obj.setBoolean("isVisiable",isVisiable);
    return obj;
  }
  
  public PImage getImage() {
    return image;
  }

  public void setImage(PImage image) {
    this.image = image;
  }

  public int getCurX() {
    return curX;
  }

  public void setCurX(int curX) {
    this.curX = curX;
  }

  public int getCurY() {
    return curY;
  }

  public void setCurY(int curY) {
    this.curY = curY;
  }

  public boolean isVisiable() {
    return isVisiable;
  }

  public void setVisiable(boolean visiable) {
    isVisiable = visiable;
  }


}
****End of FixedObject.pde****
GameConstant.pde 
public class GameConstant{
  public final int MAX_WIDTH; //sreen width
  public final int MAX_HEIGHT;  //screen height
  public final int BUTTON_SPACE;  //button space
  public GameConstant(){
    MAX_WIDTH = 1024; 
    MAX_HEIGHT = 768;
    BUTTON_SPACE = 150; //first window
  }
}
****End of GameConstant.pde****
GameLevel1.pde 
import java.util.*;
class GameLevel1 {
 

    public boolean gameStarted = false;
    public boolean showStartImage = true;
    public final Helicopter helicopter = new Helicopter("helicopter.png",0,width/4,3,15);
    public Map[] newMaps = new Map[3];
    public int randomMap = (int)random(5);
    public final GoldCoin[] coins = new GoldCoin[10];
    public final Shield shield = new Shield();
    public final Ufo[] ufos = new Ufo[4];
    public Lazor lazor = new Lazor();
    public final Asteriods asteriods = new Asteriods(1);
    public AsteroidBelts asteroidBelts = new AsteroidBelts(1, 50);
    public int score = 0;
    
    public LightDecrease lightDecrease = new LightDecrease();
    public boolean isSet = false;
    public int isLightDecrease = 1;
    public boolean isTimeUpdate = false;
    public int time = 0;
    public boolean isTrigger = false;
    
    private ScorePanel scorePanel = new ScorePanel();
    private AbilityBox[] boxs = new AbilityBox[3];
    private Icon icon = new Icon();
    private Health health = new Health();
    //private PImage box = loadImage("abilityBox1.png");
    private boolean isGameEnd = false;
    private final FastCard[] cards = new FastCard[1];
    
    public int gameTime = millis();
    public int gameTime2 = millis();
    public boolean isSetSpeedPlus = false;
    
    

public void drawInitialScene() {
    imageMode(CORNER);
    for (Map map : newMaps) { 
        image(map.image, map.curX, map.curY, width, height);
    }
    drawSpaceship(); 
    drawGamePanel();  
}


    public HashSet<Integer> keysInUse = new HashSet<Integer>();
    
    
    public GameLevel1(){
       initCoins();
       initBoxs();
       initUfos();
       initFastCards();
       initNewMaps();
    }
    

    
public void startLevel1() {
    if (!gameStarted) {
        drawInitialScene(); // Draw the initial scene 

        // Check if the start image should be shown
        if (showStartImage) {
            imageMode(CENTER);
            PImage startImg = loadImage("pressstart.png"); 
            image(startImg, width / 2, height / 2);
        }
        return; // Stop further execution to wait for the game to start
    }

    if (!isGameEnd() && !isGameEnd) {
        imageMode(CORNER);
        drawNewMaps();
        drawCoins();
        
        // Update score only when the game has actually started
        scorePanel.updateScore();  // This ensures score updates after game start
        
        // Change difficulty with time passing
        if (millis() - gameTime >= 30000) {
            increaseDifficulty();
            gameTime = millis();
        }
        
        updateSpaceshipHitTime();
        drawUfos();
        drawLazor();
        drawFastCards();
        drawSpaceship();
        drawAsteroidBelts();
        drawGamePanel();
        drawShield();
        drawHealth();
        helicopter.move(keysInUse.contains(32));
    } else {
        gameStatus.curLevel = Level.LEVEL_END;
        score = scorePanel.score + scorePanel.goldCount * 10;
        println("You lose! Your Score is " + score);
        writeScoreToTxt();
        
        // Check if the gameOverSound is not already playing before playing it
        if (!gameOverSound.isPlaying()) {
            gameOverSound.play();
            gameOverSound.rewind(); // Rewind for the next play.
        }
        
        if (playerLevelMap1.isPlaying()) {
            playerLevelMap1.pause(); 
        }
    }
}

    public void initByDifficulty(){
      switch(gameStatus.curDifficulty){
        case EASY:
        setEasy();
        break;
        case NORMAL:
        setNormal();
        break;
        case HARD:
        setHard();
        break;
        default:
      }
    }
    
    private void setEasy(){
      helicopter.health = 3;
      helicopter.speed = 15;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 15;
      }
      helicopter.sizeX = 100;
      helicopter.sizeY = 100;
    }
    
    private void setNormal(){
      helicopter.health = 2;
      helicopter.speed = 18;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 17;
      }
      helicopter.sizeX = 110;
      helicopter.sizeY = 110;
    }
    
    private void setHard(){
      helicopter.health = 1;
      helicopter.speed = 21;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 20;
      }
      helicopter.sizeX = 120;
      helicopter.sizeY = 120;
    }
    
    public void slowTime(){
     for(int i=0;i<ufos.length;i++){
        ufos[i].speed -= 7;
      }
    }
    
    private void initBoxs(){
      int path = 20;
      for(int i=0;i<boxs.length;i++){
        boxs[i] = new AbilityBox();
        boxs[i].curY = 0;
        boxs[i].curX = 210+path+i*75;
      }
    }
    
    private void initNewMaps(){
      int random = (int)random(33)+1;
      for(int i=0;i<newMaps.length;i++){
        newMaps[i] = new Map("data/gameMap/map-"+random+".png",i*width,0,5);
      }
    }
    
    private void drawNewMaps(){
      for(Map map:newMaps){
        imageMode(CORNER);
        image(map.image,map.curX,map.curY,width,height);
        map.move();
      }
    }
    
    private void initFastCards(){
      for(int i=0;i<cards.length;i++){
        cards[i] = new FastCard();
        cards[i].isVisiable = true;
        //int posY = (int)((height-100)*Math.random());
        int posY = (int) random(asteroidBelts.getRange(), height - asteroidBelts.getRange()-100);
        int posX =  width-100+(i+1)*1500;
        cards[i].curY = posY;
        cards[i].curX = posX;
      }
    }
    
    private void initCoins(){
      for(int i=0;i<coins.length;i++){
        coins[i] = new GoldCoin(asteroidBelts.getRange());
        coins[i].isVisiable = true;
        int posY = (int)random(asteroidBelts.getRange() + 50, height - asteroidBelts.getRange()-50);
        int posX =  width-100+i*(int)random(300);
        coins[i].curX = posX;
        coins[i].curY = posY;
      }
    }
    
    private void initUfos(){
      for(int i=0;i<ufos.length;i++){
        ufos[i] = new Ufo(asteroidBelts.getRange());
        ufos[i].isVisiable = true;
        int posY = ufos[i].getYAxisWithinAsteroidBelts();
        int posX =  width+(int)random(2000)+(int)(i*random(100));
        ufos[i].curX = posX;
        ufos[i].curY = posY;
      }
    }

    
    public boolean isGameEnd(){
      if(helicopter.isOutOfBound()||helicopter.health==0){
        return true;
      }
      return false;
    }
    
    public void drawGamePanel(){
      if (gameStarted) {
       fill(255);
       textSize(30);
       textAlign(LEFT);
       text("Score:",0,50);
       text(scorePanel.score,160,50);
       text("Mineral:",0,100);
       text(scorePanel.goldCount,210,100);
       text("Kill:",0,150);
       text(scorePanel.killCount,120,150);
       scorePanel.updateScore();
      }
    }
    
public void drawSpaceship() {
    if(helicopter.hitBeginTime!=0){
        image(helicopter.images[2], helicopter.curX, helicopter.curY, helicopter.sizeX, helicopter.sizeY);
        tint(150,100);
    }
    if (keysInUse.contains(32)){
        image(helicopter.images[1], helicopter.curX, helicopter.curY, helicopter.sizeX, helicopter.sizeY);
    } else {
        image(helicopter.images[0], helicopter.curX, helicopter.curY, helicopter.sizeX, helicopter.sizeY);
    }
    noTint();
}
    
    public void updateSpaceshipHitTime(){
      if(millis()-helicopter.hitBeginTime>=helicopter.invincibleTimeWhenLoseHp){
        helicopter.hitBeginTime = 0;
      }
    }
    
    private void drawAsteroidBelts() {
      for(int i=0;i<asteroidBelts.asteroidCount;i++){
        image(asteroidBelts.images[0],asteroidBelts.topImagesPos[i][0],asteroidBelts.topImagesPos[i][1],50,50);
        image(asteroidBelts.images[0],asteroidBelts.botImagesPos[i][0],asteroidBelts.botImagesPos[i][1],50,50);
        String intersect = helicopter.intersectsWithAsteroidBelt(asteroidBelts);
        if( intersect != null){
              image(helicopter.images[2], helicopter.getCurX(), helicopter.getCurY(), 100,100);
              helicopter.hitBeginTime = millis();
              helicopter.lostHealth();
              if (intersect == "TOP") helicopter.setCurY(helicopter.getCurY() + 50);
              if (intersect == "BOTTOM") helicopter.setCurY(helicopter.getCurY() - 100 );
         }
        
        asteroidBelts.moveAsteroid(i);
        if(asteroidBelts.isOutOfBound(asteroidBelts.topImagesPos[i][0])){
          asteroidBelts.topImagesPos[i][0] = width;
          asteroidBelts.topImagesPos[i][1] = (int)random(asteroidBelts.range);
        }
        if(asteroidBelts.isOutOfBound(asteroidBelts.botImagesPos[i][0])){
          asteroidBelts.botImagesPos[i][0] = width;
          asteroidBelts.botImagesPos[i][1] = (height - (int)random(asteroidBelts.range)) - 50;
      }
      
    }
    }
    
    private void drawCoins() {
        for(GoldCoin coin:coins){
            if(helicopter.intersectWithCoin(coin) && coin.isVisiable){
              coin.isVisiable = false;
              scorePanel.goldCount++; 
            }
            if(coin.isVisiable){
              image(coin.getImage(),coin.curX,coin.curY,100,100);
            }
             coin.move();
          }
    }
    
    public void drawUfos(){
       for(Ufo ufo:ufos){

            if(lazor.isVisiable==true&&lazor.intersectWithUfo(ufo)){
                ufo.isVisiable = false;
                scorePanel.killCount++;
                ufo.move();
                ufo.isVisiable = true;
            }
            
            if(helicopter.hitBeginTime==0&&helicopter.intersectWithUfo(ufo)&&shield.isVisible==false&&ufo.isVisiable){
              helicopter.lostHealth();
              helicopter.hitBeginTime = millis();
            }
            
            if(ufo.isVisiable){
              image(ufo.getImage(),ufo.curX,ufo.curY,100,100);
              ufo.move();
            }
       }
    }
    

    
    public void drawFastCards(){
       for(FastCard card:cards){
            if(helicopter.intersectWithFastCard(card)){
              if (keysInUse.contains(32)) keysInUse.remove(32);
              card.isVisiable = false;
              gameStatus.curLevel = Level.LEVEL_ROGUE;
              rogue = new Rogue();
            }
            if(card.isVisiable){
              image(card.getImage(),card.curX,card.curY,100,100);
            }
            card.asteroidRange = asteroidBelts.getRange();
            card.move();
       }
    }
    
    public void drawAbilityBoxs(){
      //old ui
       for(AbilityBox box:boxs){
         image(box.image,box.curX,box.curY,150,150);
       }
       //imageMode(CORNER);
       //image(box,250,20,300,100);
    }
    
    public void drawIcon(){
      for(int i=0;i<icon.iconCount;i++){
        image(icon.images[i],boxs[i].curX+50,boxs[i].curY+50,50,50);
      }
    }
    
    public void drawHealth(){
      switch(helicopter.health){
        case 1: image(health.images[0],0,170,200,40); break;
        case 2: image(health.images[1],0,170,200,40); break;
        case 3: image(health.images[2],0,170,200,40); break;
      }
    }
    
    public void drawLazor(){
      updateLazor();
      if(lazor.isVisiable==true){
         image(lazor.image,lazor.curX+40,lazor.curY-45,1500,150);
         lazor.move();
         lazor.isVisiable = false;
      }
    }
    
    public void updateLazor(){
      lazor.curX = helicopter.curX;
      lazor.curY = helicopter.curY;
    }
    
    public void drawShield(){
      if(shield.isVisible){
        if (keysInUse.contains(90) && scorePanel.goldCount > 0) scorePanel.goldCount--; 
        
        image(shield.image,helicopter.curX-15,helicopter.curY-25,150,150);
        if (shield.isBonusShieldInUse() && millis() - shield.getStartTime() - shield.getShieldLife() >= 0) {
        shield.closeShield();
        }
        if (scorePanel.goldCount == 0 && !shield.isBonusShieldInUse()) shield.closeShield();
      }

    }
    
    public void writeScoreToTxt(){
      var scores = readHighestScoreFromTxt("score.txt");
      int[] rank = new int[5];
      var pq = new PriorityQueue<Integer>(new Comparator<Integer>(){
        public int compare(Integer a,Integer b){
          return a<=b?1:-1;
        }
      });
      for(int i=0;i<rank.length;i++){
        if(i>=scores.size()){
          rank[i] = 0;
        }else{
          rank[i] = scores.get(i);
        }
        pq.offer(rank[i]);
      }
      pq.offer(score);
      println(pq);
      for(int i=1;i<=5;i++){
        rank[i-1] = pq.remove();
      }
      String []finalScore = new String[5];
      for(int i=0;i<5;i++){
        finalScore[i] = str(rank[i]);
      }
      saveStrings("data/score.txt",finalScore);
    }
    
    public ArrayList<Integer> readHighestScoreFromTxt(String filename){
      var scores = new ArrayList<Integer>();
      String[] grades = loadStrings(filename);
      for(String s:grades){
        scores.add(int(s));
      }
      return scores;
    }
    
    public void setLightDecrease(){
      for(Map map:newMaps){
        map.image.loadPixels();
        lightDecrease.change(isLightDecrease,map.image);
        map.image.updatePixels();
      }
    }
    
    public void setIsLightDecrease(){
      if(isTrigger||isLightDecrease == 2&&isTimeUpdate){
        isLightDecrease = 1;
        if(millis()-time>=5000){
          isLightDecrease = 0;
          setLightDecrease();
          isLightDecrease = 1;
          setLightDecrease();
          isTimeUpdate = false;
          isTrigger = false;
          time = 0;
          isSet = false;
          println("execute");
        }
      }
    }
    
    public void updateTime(){
      if(isLightDecrease==2&&!isTimeUpdate){
        isTrigger = true;
        time = millis();
        isTimeUpdate = true;
      }
    }
    
    public void letLightDecrease(int rate){
      int random = (int)random(101);
      if(random<=rate&&isSet==false){
          isLightDecrease = 2;
          isTrigger = true;
          isSet=true;
      }
    }
    
    public void increaseDifficulty() {
      int randomSelect = (int)random(4);
      switch (randomSelect) {
        //speed of asteroid belts
         case 1:
           asteroidBelts.setSpeed(asteroidBelts.getSpeed() + 5);
           break;
        //speed of aliens
         case 2:
           for (Ufo ufo: ufos){
             ufo.setSpeed(ufo.getSpeed() + 5);
           }
           break; 
      }
     //always change the distance between asteroid belts
     int minRange = asteroidBelts.getMinRange();
     int randomRange = (int)random(minRange, 110);
     asteroidBelts.setRange(randomRange);
     if (minRange < 70) asteroidBelts.setMinRange(minRange + 10);
    }
}
****End of GameLevel1.pde****
GameLevel2.pde 

class GameLevel2 {
public boolean gameStarted = false;
public boolean showStartImage = true;

HashSet<Integer> keysInUse = new HashSet<Integer>();


    public final Helicopter helicopter = new Helicopter("helicopter.png",0,width/4,3,15);
    public final Helicopter helicopter2 = new Helicopter("helicopter2.png",0,width/4,3,15);
    public Map[] newMaps = new Map[3];
    public int randomMap = (int)random(5);
    public final GoldCoin[] coins = new GoldCoin[10];
    public final Ufo[] ufos = new Ufo[5];
    public final Asteriods asteriods = new Asteriods(1);
    public AsteroidBelts asteroidBelts = new AsteroidBelts(1, 50);
    
    private ScorePanel scorePanel = new ScorePanel();
    private ScorePanel scorePanel2 = new ScorePanel();

    private Health health = new Health();
    private Health health2 = new Health();

    private boolean isGameEnd = false;
    private final FastCard[] cards = new FastCard[2];
    
    public int gameTime = millis();
    public boolean isSetSpeedPlus = false;
    
    public GameLevel2(){
       initCoins();
       initUfos();
       initFastCards();
       initNewMaps();
    }
    
    public void startLevel2(){
      
          if (!gameStarted) {
        imageMode(CORNER);
        drawNewMaps(); 
        drawSpaceship();

        
        if (showStartImage) {
            imageMode(CENTER);
            PImage startImg = loadImage("pressstart.png"); 
            image(startImg, width / 2, height / 2);
        }
        return;
    }
    
        if(!isGameEnd()&&!isGameEnd){
          imageMode(CORNER);
          drawNewMaps();
          drawCoins();
     
          
          //change speed with time passing
          if(millis()-gameTime>=30000){
            println("speed up!");
            for(Ufo ufo:ufos){
              ufo.speed += 5;
            }
            asteriods.speed +=1;
            //randomMap = (int)random(5);
            gameTime = millis();
          }
          
          updateSpaceshipHitTime();
          
          drawUfos();

          drawFastCards();

          drawSpaceship();
          drawAsteroidBelts();
          drawGamePanel();
          //drawIcon();
          drawHealth();
          if( helicopter.health>0){
            helicopter.move(mousePressed);
          }
          if( helicopter2.health>0){
            helicopter2.move(keyPressed && key == ' ');
          }
        }else{
          gameStatus.curLevel = Level.LEVEL_END2;
          playerLevelMap1.pause();
                  if (!minim.loadFile("gameoversound.mp3").isPlaying()) {
            minim.loadFile("gameoversound.mp3").play();}
        }
    }
    public void initByDifficulty(){
      switch(gameStatus.curDifficulty){
        case EASY:
        setEasy();
        break;
        case NORMAL:
        setNormal();
        break;
        case HARD:
        setHard();
        break;
        default:
      }
    }
    
    private void setEasy(){
      helicopter.health = 3;
      helicopter.speed = 15;
      helicopter2.health = 3;
      helicopter2.speed = 15;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 15;
      }
      helicopter.sizeX = 100;
      helicopter.sizeY = 100;
      helicopter2.sizeX = 100;
      helicopter2.sizeY = 100;
    }
    
    private void setNormal(){
      helicopter.health = 2;
      helicopter.speed = 18;
      helicopter2.health = 2;
      helicopter2.speed = 18;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 17;
      }
      helicopter.sizeX = 110;
      helicopter.sizeY = 110;
      helicopter2.sizeX = 110;
      helicopter2.sizeY = 110;
    }
    
    private void setHard(){
      helicopter.health = 1;
      helicopter.speed = 21;
      helicopter2.health = 1;
      helicopter2.speed = 21;
      for(int i=0;i<ufos.length;i++){
        ufos[i].speed = 20;
      }
      helicopter.sizeX = 120;
      helicopter.sizeY = 120;
      helicopter2.sizeX = 120;
      helicopter2.sizeY = 120;
    }
        
    private void initNewMaps(){
      int random = (int)random(33)+1;
      for(int i=0;i<newMaps.length;i++){
        newMaps[i] = new Map("data/gameMap/map-"+random+".png",i*width,0,5);
      }
    }
    
    private void drawNewMaps(){
      for(Map map:newMaps){
        imageMode(CORNER);
        image(map.image,map.curX,map.curY,width,height);
        map.move();
      }
    }
    
    private void initFastCards(){
      for(int i=0;i<cards.length;i++){
        cards[i] = new FastCard();
        cards[i].isVisiable = true;
        int posY = (int)((height-100)*Math.random());
        int posX =  width-100+(i+1)*1500;
        cards[i].curY = posY;
        cards[i].curX = posX;
      }
    }
    
    
    private void initCoins(){
      for(int i=0;i<coins.length;i++){
        coins[i] = new GoldCoin(asteroidBelts.getRange());
        coins[i].isVisiable = true;
        int posY = (int)random(asteroidBelts.getRange() + 50, height - asteroidBelts.getRange()-50);
        int posX =  width-100+i*(int)random(300);
        coins[i].curX = posX;
        coins[i].curY = posY;
      }
    }
    
    private void initUfos(){
      for(int i=0;i<ufos.length;i++){
        ufos[i] = new Ufo(asteroidBelts.getRange());
        ufos[i].isVisiable = true;
        int posY = ufos[i].getYAxisWithinAsteroidBelts();
        int posX =  width+(int)random(2000)+(int)(i*random(100));
        ufos[i].curX = posX;
        ufos[i].curY = posY;
      }
    }

    
    public boolean isGameEnd(){
      if(helicopter.health==0&&helicopter2.health==0){
        return true;
      }
      return false;
    }
    
    public void drawGamePanel(){
       fill(255);
       textSize(30);
       textAlign(LEFT);
       text("Score:",0,50);
       text(scorePanel.score,160,50);
       text("Mineral:",0,100);
       text(scorePanel.goldCount,210,100);
       if(helicopter.health>0){
         scorePanel.updateScore();
       }       
      textAlign(LEFT);
       text("Score:",width-250,50);
       text(scorePanel2.score,width-70,50);
       text("Mineral:",width-250,100);
       text(scorePanel2.goldCount,width-30,100);
       if(helicopter2.health>0){
         scorePanel2.updateScore();
       }
    }
    
    public void drawSpaceship(){
      if(helicopter.health>0&&helicopter.hitBeginTime!=0){
        image(helicopter.images[2], helicopter.curX, helicopter.curY,helicopter.sizeX,helicopter.sizeY);
         tint(150,100); 
      }
      if(helicopter2.health>0&&helicopter2.hitBeginTime!=0){
        image(helicopter2.images[2], helicopter2.curX, helicopter2.curY,helicopter2.sizeX,helicopter2.sizeY);
         tint(150,100); 
      }
      if( helicopter.health>0){
        if(mousePressed){
          image(helicopter.images[1],helicopter.curX,helicopter.curY,helicopter.sizeX,helicopter.sizeY);
        }else{
          image(helicopter.images[0],helicopter.curX,helicopter.curY,helicopter.sizeX,helicopter.sizeY);
        }
      }
      noTint();
      if( helicopter2.health>0){
        if(keyPressed&&key==' '){
          image(helicopter2.images[4],helicopter2.curX,helicopter2.curY,helicopter2.sizeX,helicopter2.sizeY);
        }else{
          image(helicopter2.images[3],helicopter2.curX,helicopter2.curY,helicopter2.sizeX,helicopter2.sizeY);
        }
      }
      noTint();
    }
    
    public void updateSpaceshipHitTime(){
      if(millis()-helicopter.hitBeginTime>=helicopter.invincibleTimeWhenLoseHp){
        helicopter.hitBeginTime = 0;
      }
      if(millis()-helicopter2.hitBeginTime>=helicopter2.invincibleTimeWhenLoseHp){
        helicopter2.hitBeginTime = 0;
      }
    }
    
    private void drawAsteroidBelts() {
      for(int i=0;i<asteroidBelts.asteroidCount;i++){
        image(asteroidBelts.images[0],asteroidBelts.topImagesPos[i][0],asteroidBelts.topImagesPos[i][1],50,50);
        image(asteroidBelts.images[0],asteroidBelts.botImagesPos[i][0],asteroidBelts.botImagesPos[i][1],50,50);
        String intersect = helicopter.intersectsWithAsteroidBelt(asteroidBelts);
        String intersect2 = helicopter2.intersectsWithAsteroidBelt(asteroidBelts);
        if( helicopter.health>0&&(intersect != null||helicopter.isOutOfBound())){
              image(helicopter.images[2], helicopter.getCurX(), helicopter.getCurY(), 100,100);
              helicopter.hitBeginTime = millis();
              helicopter.lostHealth();
              if (intersect == "TOP") helicopter.setCurY(helicopter.getCurY() + 50);
              if (intersect == "BOTTOM") helicopter.setCurY(helicopter.getCurY() - 100 );
         }
         
         if( helicopter2.health>0&& (intersect2 != null||helicopter2.isOutOfBound())){
              image(helicopter2.images[2], helicopter2.getCurX(), helicopter2.getCurY(), 100,100);
              helicopter2.hitBeginTime = millis();
              helicopter2.lostHealth();
              if (intersect2 == "TOP") helicopter2.setCurY(helicopter2.getCurY() + 50);
              if (intersect2 == "BOTTOM") helicopter2.setCurY(helicopter2.getCurY() - 100 );
         }
        
        asteroidBelts.moveAsteroid(i);
        if(asteroidBelts.isOutOfBound(asteroidBelts.topImagesPos[i][0])){
          asteroidBelts.topImagesPos[i][0] = width;
          asteroidBelts.topImagesPos[i][1] = (int)random(asteroidBelts.range);
        }
        if(asteroidBelts.isOutOfBound(asteroidBelts.botImagesPos[i][0])){
          asteroidBelts.botImagesPos[i][0] = width;
          asteroidBelts.botImagesPos[i][1] = (height - (int)random(asteroidBelts.range)) - 50;
        }
      }
    }
    
    private void drawCoins() {
        for(GoldCoin coin:coins){
            if( helicopter.health>0&&helicopter.intersectWithCoin(coin) && coin.isVisiable){
              coin.isVisiable = false;
              scorePanel.goldCount++; 
            }
            if( helicopter2.health>0&&helicopter2.intersectWithCoin(coin) && coin.isVisiable){
              coin.isVisiable = false;
              scorePanel2.goldCount++; 
            }
            if(coin.isVisiable){
              image(coin.getImage(),coin.curX,coin.curY,100,100);
            }
             coin.move();
          }
    }
    
    public void drawUfos(){
       for(Ufo ufo:ufos){
                   
            if( helicopter.health>0&&helicopter.hitBeginTime==0&&helicopter.intersectWithUfo(ufo)&&ufo.isVisiable){
              helicopter.lostHealth();
              helicopter.hitBeginTime = millis();
            }
            
             if( helicopter2.health>0&&helicopter2.hitBeginTime==0&&helicopter2.intersectWithUfo(ufo)&&ufo.isVisiable){
              helicopter2.lostHealth();
              helicopter2.hitBeginTime = millis();
            }
            
            if(ufo.isVisiable){
              image(ufo.getImage(),ufo.curX,ufo.curY,100,100);
              ufo.move();
            }
       }
    }
    

    
    public void drawFastCards(){
       for(FastCard card:cards){
            if( helicopter.health>0&&helicopter.intersectWithFastCard(card)){
              card.isVisiable = false;
              helicopter.setHealth(helicopter.getHealth()+1);
              for(Ufo ufo:ufos){
                ufo.speed+=5;
              } 
            }
            if( helicopter2.health>0&&helicopter2.intersectWithFastCard(card)){
              card.isVisiable = false;
              helicopter2.setHealth(helicopter2.getHealth()+1);
              for(Ufo ufo:ufos){
                ufo.speed+=5;
              } 
            }
            if(card.isVisiable){
              image(card.getImage(),card.curX,card.curY,100,100);
            }
            card.move();
       }
    }
    public void drawHealth(){
      switch(helicopter.health){
        case 1: image(health.images[0],0,120,200,40); break;
        case 2: image(health.images[1],0,120,200,40); break;
        case 3: image(health.images[2],0,120,200,40); break;
      }
      switch(helicopter2.health){
        case 1: image(health.images[0],width-250,120,200,40); break;
        case 2: image(health.images[1],width-250,120,200,40); break;
        case 3: image(health.images[2],width-250,120,200,40); break;
      }
    }
}
****End of GameLevel2.pde****
GameLevelLAN.pde 
class GameLevelLAN{
  public final PImage imageHelicopter = loadImage("helicopter.png");
  public boolean isGameAllEnd = false;
  public Player player1;
  public Player player2;
  public PublicSource publicSource;
  public final Map map1 = new Map("map1.png",0,0,2);
  public GameLevelLAN(){
      initPlayer1();
  }
  
  public void initPlayer1(){
      player1 = new Player1();
  }
  
  public void setPlayer2(Player player2){
     this.player2 = player2;
  }
  
  public void initPublicSource(){
      
  }
  
    public void startLevelLanBattle(){
      if(isGameAllEnd){
        gameStatus.curLevel = Level.LEVEL_BEGIN;
        return;
      }
      if(!player1.isGameEnd||!player2.isGameEnd){
          imageMode(CORNER);
          //draw map
          image(map1.getImage(),map1.curX,map1.curY,width,height);
          if(!player1.isGameEnd){
            image(imageHelicopter,player1.helicopter.curX,player1.helicopter.curY,100,100);
          }
          if(!player2.isGameEnd){
            image(imageHelicopter,player2.helicopter.curX,player2.helicopter.curY,100,100);
          }
          player1.helicopter.move(mousePressed);
       }
       isGameAllEnd =  player1.isGameEnd&&player2.isGameEnd;
    }
    //public void drawCoins(){
    //   for(GoldCoin coin:publicSource.coins){
    //      if(player1.helicopter.intersectWithCoin(coin) && coin.isVisiable){
    //          coin.isVisiable = false;
    //          player1.scorePanel.goldCount++; 
    //        }
    //       if(coin.isVisiable){
    //          image(coin.getImage(),coin.curX,coin.curY,100,100);
    //       }
    //       coin.move();
    //      if(player2.helicopter.intersectWithCoin(coin) && coin.isVisiable){
    //          coin.isVisiable = false;
    //          player2.scorePanel.goldCount++; 
    //        }
    //       if(coin.isVisiable){
    //          image(coin.getImage(),coin.curX,coin.curY,100,100);
    //       }
    //       coin.move();
    //  }
    //}
}
****End of GameLevelLAN.pde****
GameResultPanel.pde 
class GameResultPanel extends FixedObject{
   public int score;
   public int mineralCount;
   public int diedEnemyCount;     
   public GameResultPanel(){
     image = loadImage("result.png");
   }
   
   public void createPanel(){
      imageMode(CENTER);
      image(image,width/2,height/2,700,700);
      fill(255);
      textSize(50);
      
      text(gameLevel1.score,437,460);
      text(gameLevel1.scorePanel.goldCount,618,220);
      text(gameLevel1.scorePanel.killCount,618,310);
   }
}
****End of GameResultPanel.pde****
GameResultPanel2.pde 
class GameResultPanel2 extends FixedObject{
   public int score1;
   public int score2; 
   public GameResultPanel2(){
     image = loadImage("score_panel2.png");
   }
   
   public void createPanel(){
      imageMode(CENTER);
      image(image,width/2,height/2,700,700);
      fill(255);
      textSize(50);
      
      text(gameLevel2.scorePanel.score+gameLevel2.scorePanel.goldCount*10,475,301);
      text(gameLevel2.scorePanel2.score+gameLevel2.scorePanel2.goldCount*10,475,405);
      String winner = gameLevel2.scorePanel.score+gameLevel2.scorePanel.goldCount*10>gameLevel2.scorePanel2.score+gameLevel2.scorePanel2.goldCount*10?"P1":"P2";
      text(winner,675,502);
   }
}
****End of GameResultPanel2.pde****
GameStatus.pde 
public class GameStatus{
  public Level curLevel = Level.LEVEL_START;
  public Difficulty curDifficulty = Difficulty.EASY;// Default game difficulty is easy
}
****End of GameStatus.pde****
GoldCoin.pde 
public class GoldCoin extends MoveObject{
  private int asteroidRange;
  public GoldCoin(int asteroids){
    asteroidRange = asteroids;
    PImage image = loadImage("mineral.png");
    this.setImage(image);
    speed = 10;
  }
  
  @Override
  public void move(){
    if(isOutOfBound()){
      isVisiable = true;
      curX = width+(int)random(500);
      curY = (int)random(asteroidRange + 60, height - asteroidRange - 150);
    }
    curX-=speed;
  }
  
  @Override
  public boolean isOutOfBound(){
    if(curX<0){
      return true;
    }
    return false;
  };
}
****End of GoldCoin.pde****
Health.pde 
class Health extends FixedObject{
  public int healthCount = 3;
  public Health(){
    initHealth();
  }
  
  public void initHealth(){
    images = new PImage[healthCount];
    for(int i=0;i<healthCount;i++){
      images[i] = loadImage("health"+"-"+(i+1)+".png");
    }
  }

}
****End of Health.pde****
Helicopter.pde 
class Helicopter extends MoveObject implements Serializable{
  public int health;
  public int invincibleTimeWhenLoseHp = 3000; //3s
  public int hitBeginTime = 0;
  public Helicopter(){

  }
  
  public Helicopter(String imagePath,int curX,int curY,int health,int speed){
    this.curX = curX;
    this.curY = curY;
    this.health = health;
    this.speed = speed;
    this.sizeX = 100;
    this.sizeY = 100;
    String[] urls = {"spaceship.png","spaceship1.png","spaceshipDamaged.png","helicopter2.png","helicopter22.png"};
    images = new PImage[urls.length];
    setImages(urls);
    image = loadImage(imagePath);
  }
  
  

  public void move(boolean isClicked){
    if(isClicked) {
      curY -= speed;
    }else{
      curY += speed;
    }
  }
  
  public void moveByKey(boolean isWPressed){
    if(isWPressed&&keyPressed){
      curY += speed;
    }else{
      curY -= speed;
    }
  }
  
  public void move(){
    curX += speed;
    if (curX > width + 50) { 
      curX = -100;
      speed = 0;
    }
  }
  
  public void display(){
    imageMode(CORNER);
    image(images[1], curX -20, curY + 40, 100, 100);
  }

  @Override
  public boolean isOutOfBound(){
    if(curY<0||curY+100>height){
      return true;
    }
    return false;
  }

  public int getHealth() {
    return health;
  }

  public void setHealth(int health) {
    if(health>=3){
      this.health = 3;
    }else{
      this.health = health;
    }
  }


  public void lostHealth(){
    health--;
  }
  
  public boolean intersectWithCoin(GoldCoin coin){
    if(coin.curX+50>=curX&&coin.curX+50<=curX+100&&coin.curY+50>=curY&&coin.curY+50<=curY+100){
      return true;
    }
    return false;
  }
  
  public boolean intersectWithUfo(Ufo ufo){
    if(ufo.curX+50>=curX&&ufo.curX+50<=curX+100&&ufo.curY+50>=curY&&ufo.curY+50<=curY+100){
      return true;
    }
    return false;
  }
  
  public String intersectsWithAsteroidBelt(AsteroidBelts asteroids){
    for(int i=0;i<asteroids.asteroidCount;i++){
      if ((curX >= asteroids.topImagesPos[i][0] && curX <= asteroids.topImagesPos[i][0] + asteroids.imgWidth) &&
      (curY >= asteroids.topImagesPos[i][1] && curY <= asteroids.topImagesPos[i][1] + asteroids.imgHeight)){
        return "TOP";
      }
      if ((curX >= asteroids.botImagesPos[i][0] && curX <= asteroids.botImagesPos[i][0] + asteroids.imgWidth) &&
      (curY + 100 >= asteroids.botImagesPos[i][1] && curY + 100 <= asteroids.botImagesPos[i][1] + asteroids.imgHeight)){
        return "BOTTOM";
      }
    }
    return null;
  }
  
  
  public boolean intersectWithFastCard(FastCard card){
    if(card.curX+50>=curX&&card.curX+50<=curX+100&&card.curY+50>=curY&&card.curY+50<=curY+100){
      return true;
    }
    return false;
  }
}
****End of Helicopter.pde****
Icon.pde 
class Icon extends FixedObject{
  public int iconCount = 3;
  public Icon(){
    initIcons();
  }
  
  public void initIcons(){
    images = new PImage[iconCount];
    images[0] = loadImage("shield-icon.png");
    images[1] = loadImage("missile-icon.png");
    images[2] = loadImage("bullet-icon.png");
  }

}
****End of Icon.pde****
JSONUtilizer.pde 
class JSONUtilizer{
  public Helicopter JSONToHelicopter(JSONObject obj){
    int curX = obj.getInt("curX");
    int curY = obj.getInt("curY");
    int speed = obj.getInt("speed");
    boolean isVisiable = obj.getBoolean("isVisiable");
    Helicopter hp = new Helicopter();
    hp.curX = curX;
    hp.curY = curY;
    hp.speed = speed;
    hp.isVisiable = isVisiable;
    return hp;
  }
  
  public Player JSONToPlayer(JSONObject obj){
    JSONObject helicopter = obj.getJSONObject("helicopter");
    Helicopter hp = JSONToHelicopter(helicopter);
    boolean isGameEnd = obj.getBoolean("isGameEnd");
    Player player = new Player();
    player.isGameEnd = isGameEnd;
    player.helicopter = hp;
    return player;
  }
  
}
****End of JSONUtilizer.pde****
KeyPressedEvent.pde 
void keyPressed() {
    // Prevent any key interaction until the main menu is reached or the game is in the ROGUE level
    if (gameStatus.curLevel == Level.LEVEL_START || gameStatus.curLevel == Level.LEVEL_ROGUE) {
        return; 
    }

    if (gameStatus.curLevel == Level.LEVEL_MAP1) {
        gameLevel1.keysInUse.add(keyCode);

        // Start game with space bar and start the background music for Level 1
        if (keyCode == 32) { // 32 is the ASCII code for space
            gameLevel1.gameStarted = true;
            if (!playerLevelMap1.isPlaying()) {
                playerLevelMap1.play();
                playerLevelMap1.loop();
            }
        }
    } else if (gameStatus.curLevel == Level.LEVEL_MAP2) {
        gameLevel2.keysInUse.add(keyCode);

        // Start game with space bar and manage the start image for Level 2
        if (keyCode == 32) {
            gameLevel2.gameStarted = true;
            gameLevel2.showStartImage = false;
            if (!playerLevelMap1.isPlaying()) {
                playerLevelMap1.play();
                playerLevelMap1.loop();
            }
        }
    }

    // Other controls
    if ((key == 'X' || key == 'x') && gameStatus.curLevel == Level.LEVEL_MAP1 && gameLevel1.scorePanel.goldCount > 0) {
        gameLevel1.scorePanel.goldCount--;
        gameLevel1.lazor.isVisiable = true;
    }
   
    if (key == 'q' || key == 'Q') {
        gameStatus.curLevel = Level.LEVEL_BEGIN;
        playerLevelMap1.pause(); // Stop the music when quitting to main menu
    }
   
    if (keyCode == 90 && gameStatus.curLevel == Level.LEVEL_MAP1 && gameLevel1.scorePanel.goldCount > 0) {
        gameLevel1.scorePanel.goldCount--;
        gameLevel1.shield.showShield(); 
        if (gameLevel1.scorePanel.goldCount == 0) {
            gameLevel1.shield.closeShield();
        }
    }
   
    if (key == 'r' || key == 'R') {
        gameStatus.curLevel = Level.LEVEL_START;
        gameStarted = false;
        textVisible = true;
        starsFormingMiracle = false;
        isAnimationEnd = false;
        Arrays.fill(usedStars, false);
        spaceship.speed = 8;
        playerLevelMap1.pause(); // Ensure music stops on reset
    }
}

void keyReleased() {
    if (gameStatus.curLevel == Level.LEVEL_MAP1) {
        gameLevel1.keysInUse.remove(keyCode);
        if (keyCode == 90) {
            gameLevel1.shield.closeShield(); 
        }
    } else if (gameStatus.curLevel == Level.LEVEL_MAP2) {
        gameLevel2.keysInUse.remove(keyCode);
    }
}
****End of KeyPressedEvent.pde****
Lazor.pde 
class Lazor extends Ability implements Serializable{
  public Lazor(){
    image = loadImage("lazor.png");
    speed = width;
  }
  
  @Override
  public void move(){
    curX+=speed;
  }
  
  public boolean intersectWithUfo(Ufo ufo){
      if (ufo.curX > 0 && ufo.curX < width && 
      ((ufo.curY >= curY && ufo.curY <= curY + 105) ||
      (ufo.curY + 100 >= curY && ufo.curY <= curY + 105))) {
      return true;
    }
    return false;
  }
  
}
****End of Lazor.pde****
Level.pde 
enum Level{
  LEVEL_BEGIN,
  LEVEL_SET,
  LEVEL_MAP1,
  LEVEL_LOGIN,
  LEVEL_LANBATTLE,
  LEVEL_END,
  LEVEL_RANK,
  LEVEL_START,
  LEVEL_STORY,
  LEVEL_TOTURIAL,
  LEVEL_MAP2,
  LEVEL_ROGUE,
  LEVEL_END2,
  LEVEL_MODECHOOSE
}
****End of Level.pde****
LightDecrease.pde 
class LightDecrease extends Environment{
  
  @Override
  void change(int flag, PImage img){
    for (int i = 0; i < img.pixels.length; i++) {
    color c = img.pixels[i];
    float r,g,b;
    if(flag==0){
     r = red(c)*2.5;  
      g = green(c)*2.5;  
       b = blue(c)*2.5;  
    }else if(flag==1){
       r = red(c);  
     g = green(c);  
     b = blue(c);  
    }else{
      r =red(c) * 0.4;  
       g = green(c) * 0.4;  
      b = blue(c) * 0.4;  
    }
    color newColor = color(r, g, b);
    img.pixels[i] = newColor;
    }
  }

}
****End of LightDecrease.pde****
LoginUnit.pde 
import g4p_controls.*;

class LoginUnit {
  GWindow gWindow ;
  GTextField usernameField, passwordField;
  public LoginUnit(PApplet window) {
      gWindow = GWindow.getWindow(window,"login",width/2,height/2,400,200,JAVA2D);
      usernameField = new GTextField(gWindow, 100, 50, 200, 30);
      usernameField.setPromptText("Username");
      
      passwordField = new GTextField(gWindow, 100, 100, 200, 30);
      passwordField.setPromptText("Your message to another player");
      passwordField.setOpaque(true);
      
      loginButton = new GButton(gWindow, 150, 150, 100, 40,"1");
      loginButton.setText("connect");
      isLogin = false;
  }
}

void handleButtonEvents(GButton button, GEvent event){
  if(button==loginButton&&event == GEvent.CLICKED){
    println("connect");
    loginUnit.gWindow.setVisible(false);
    loginUnit.gWindow.close();
    client.connect(sketch);
    gameStatus.curLevel = Level.LEVEL_LANBATTLE;
  }
}
****End of LoginUnit.pde****
Map.pde 
class Map extends MoveObject{
  public Map(String imagePath,int curX,int curY,int speed){
    this.curX = curX;
    this.curY = curY;
    this.speed = speed;
    image = loadImage(imagePath);
  }
  @Override
  public void move(){
    if(curX+width<=0){
      curX = 2*width;
    }
    curX -= speed;
  }

}
****End of Map.pde****
Miracle.pde 
import gifAnimation.*;
import ddf.minim.*;

//thread(to reduce objects loading time)
Thread thread;
boolean isAllDone = false;

//startAnimation
int numStars = 500; 
Star[] stars; 
Spaceship spaceship; 
String welcomeText = "Welcome to Group 5 Game!";
String startText = "Click to Start";
float textExpandSpeed = 5; 
boolean gameStarted = false;
boolean textVisible = true;
boolean starsFormingMiracle = false;
boolean[] usedStars; 
boolean isAnimationEnd = false;

//LAN BATTLE
Client client;
Player player2;
Player player1;
ProtocolDataFormat protocolDataFormat; 
PApplet sketch = this;
String ip;
String msgFromServer;

//font
PFont pfont;

//time
int now;

//Login UI
GButton loginButton;
LoginUnit loginUnit;
boolean isLogin=false;


GameConstant gameConstant;


ButtonImage buttonImage; 


BackgroundImage backgroundImage; 


Level level;

//start background 
Gif gif;
PImage backgroundStart;

//start font
//PFont font;

//gameName miracle
PImage gameName;

//bgm starter
Minim minim;
AudioPlayer playerLevelBegin;
AudioPlayer playerLevelSet;
AudioPlayer playerLevelMap1;
AudioPlayer playerBullet1;
AudioPlayer playerStart;
AudioPlayer playerClick;
AudioPlayer gameOverSound;

//GameStatus
GameStatus gameStatus;

//SetPanel
SetPanel setPanel;

//GameLevel
static GameLevel1 gameLevel1;
static GameLevel2 gameLevel2;
static GameLevelLAN gameLevelLAN;

//Rogue
Rogue rogue;

//ModeChoosePanel
ModeChoosePanel mcPanel;

void setup(){  
  thread = new Thread(new MyRunnable());
  thread.start();
 
  ////init bgm
  minim = new Minim(this);
  playerStart = minim.loadFile(Bgm.bgmStart);
  
  //init GameStatus
  gameStatus = new GameStatus();
  
  //init stars
  stars = new Star[numStars];
  for (int i = 0; i < numStars; i++) {
    stars[i] = new Star();
  }
  
  //init usedStars
  usedStars = new boolean[numStars];
  Arrays.fill(usedStars,false);
  
  //font
  pfont = createFont("font/Boxy-Bold.ttf",50);
  textFont(pfont);
  size(1125,630);
  
  //init spaceship
  spaceship = new Spaceship();
  
    minim = new Minim(this); // Ensure Minim is initialized
  gameOverSound = minim.loadFile("gameoversound.mp3", 2048); // 2048 is the buffer size, 

}




void draw(){
  frameRate(180);
  isAllDone = !thread.isAlive();
  // show background with level
  // if all objects have been loaded
  if(isAllDone){
    //init cursor
     //cursor(buttonImage.cursor);
  }
  
  if(gameStatus.curLevel == Level.LEVEL_START){
    background(0);
    bgmStart(gameStatus.curLevel);
    drawStartAni();
    return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_BEGIN&&isAllDone){
    if(gameLevel1.isGameEnd == true||gameLevel1.isGameEnd()){
      gameLevel1 = new GameLevel1();
      gameLevel1.initByDifficulty();
    }
    
    if(gameLevel2.isGameEnd == true||gameLevel2.isGameEnd()){
      gameLevel2 = new GameLevel2();
      gameLevel2.initByDifficulty();
    }
    
    // play music
    bgmStart(gameStatus.curLevel);
    imageMode(CORNER);
    gif.play();
    image(gif, 0,0 ,width,height);
    imageMode(CORNER);
    image(buttonImage.BTN_SETTAG,width-70,30,40,40);
    drawButton(Level.LEVEL_BEGIN);
    imageMode(CENTER);
    image(gameName,width/2,height/5,gameName.width,gameName.height);
    return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_SET&&isAllDone){
    setPanel.createPanel();
      if(mousePressed&&mouseX>=setPanel.volumePointerX-20&&mouseX-10<=setPanel.volumePointerX+80&&mouseY>=setPanel.volumePointerY-20&&mouseY<=setPanel.volumePointerY+40){
      if(mouseX<400){
        setPanel.volumePointerX = 400;
      }
      else if(mouseX>695){
        setPanel.volumePointerX = 695;
      }
      else{
         setPanel.volumePointerX = mouseX-40;
      }
      float diff = (setPanel.volumePointerX-400.0)/3.0-50;
      setVolume(diff);
    }
    
    //set difficulty
    if(mousePressed&&mouseY>=setPanel.diffPointerY-20&&mouseY<=setPanel.diffPointerY+40){
      if(mouseX<=500){
        setPanel.diffPointerX = 360;
        gameStatus.curDifficulty = Difficulty.EASY;
      }
      else if(mouseX>=600){
        setPanel.diffPointerX = 730;
         gameStatus.curDifficulty = Difficulty.HARD;
      }
      else{
         setPanel.diffPointerX = 550;
         gameStatus.curDifficulty = Difficulty.NORMAL;
      }
    }
    //println("setPanel.volumePointerX:"+setPanel.volumePointerX+",setPanel.volumePointerY:"+setPanel.volumePointerY);
    println(gameStatus.curDifficulty);
     gameLevel1.initByDifficulty();
    return;
  }
  if(gameStatus.curLevel == Level.LEVEL_MAP1&&isAllDone){
    // play music
    bgmStart(gameStatus.curLevel);
    gameLevel1.startLevel1();
    if(gameLevel1.isGameEnd||gameLevel1.isGameEnd){
      gameLevel1 = null;
    }
    return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_MAP2&&isAllDone){
    // play music
    bgmStart(gameStatus.curLevel);
    gameLevel2.startLevel2();
    if(gameLevel2.isGameEnd||gameLevel2.isGameEnd){
      gameLevel2 = null;
    }
    return;
  }
  
  if(isLogin&&gameStatus.curLevel == Level.LEVEL_LOGIN&&isAllDone){
    // play music
    bgmStart(Level.LEVEL_BEGIN);
    //init loginUi
    loginUnit = new LoginUnit(this);
    return;
  }
  if(gameStatus.curLevel == Level.LEVEL_LANBATTLE&&isAllDone){
     if(player2!=null){
      gameLevelLAN.setPlayer2(player2);
      gameLevelLAN.startLevelLanBattle();
    }
    player1 = gameLevelLAN.player1;
    if(client!=null){
      client.send();
    }
    return;
  }
  if(gameStatus.curLevel==Level.LEVEL_ROGUE){
     rogue.draw();
  }
  
  if(gameStatus.curLevel == Level.LEVEL_STORY){
     Story story = new Story();
     story.createPanel();
     return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_MODECHOOSE){
     mcPanel.createPanel();
  }
  
  if(gameStatus.curLevel == Level.LEVEL_TOTURIAL){
     Story story = new Story();
     story.createPanel();
     return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_END&&isAllDone){
    GameResultPanel gameResultPanel = new GameResultPanel();
    gameResultPanel.createPanel();
    return;
  }
  if(gameStatus.curLevel == Level.LEVEL_END2&&isAllDone){
    GameResultPanel2 gameResultPanel2 = new GameResultPanel2();
    gameResultPanel2.createPanel();
    return;
  }
  
  if(gameStatus.curLevel == Level.LEVEL_RANK&&isAllDone){
    ToturialPanel toturialPanel = new  ToturialPanel();
     toturialPanel.createPanel();
     return;
  }
}
****End of Miracle.pde****
ModeChoosePanel.pde 
class ModeChoosePanel{
  public PImage playMode;
  public ModeChoosePanel(){
     playMode = loadImage("playMode.png");
   }
   
   public void createPanel(){
      imageMode(CORNER);
      image(playMode,0,0,width,height);
      fill(255);
   }

}
****End of ModeChoosePanel.pde****
MouseClickedEvent.pde 
void mousePressed(){
  if (!gameStarted && textFullyExpanded()&&gameStatus.curLevel == Level.LEVEL_START) {
    gameStarted = true;
    textVisible = false;
    starsFormingMiracle = true; 
  }
  
  if(gameStarted){
     if(!playerStart.isPlaying()){
       playerStart.rewind();
     }
  }
  
  if(isMouseInButtonStart()&&gameStatus.curLevel==Level.LEVEL_BEGIN){
    System.out.println("start button is clicked");
    gameStatus.curLevel = Level.LEVEL_MODECHOOSE;
    return;
  }
  
  if(gameStatus.curLevel==Level.LEVEL_MODECHOOSE){
    //TO DO
    if(mouseX>=213&&mouseX<=473&&mouseY>=152&&mouseY<=559){
      gameStatus.curLevel = Level.LEVEL_MAP1;
      return;
    }
    if(mouseX>=679&&mouseX<=933&&mouseY>=152&&mouseY<=559){
      gameStatus.curLevel = Level.LEVEL_MAP2;
      return;
    }
    if(mouseX>=495&&mouseX<=641&&mouseY>=551&&mouseY<=603){
      gameStatus.curLevel = Level.LEVEL_BEGIN;
      return;
    }
  }
  
  if(isMouseInButtonSet()&&gameStatus.curLevel==Level.LEVEL_BEGIN){
    System.out.println("set button is clicked");
    gameStatus.curLevel = Level.LEVEL_SET;
    return;
  }
  
  //bug 
  if(gameStatus.curLevel==Level.LEVEL_BEGIN){
    if(mouseX>=1020&&mouseX<=1150&&mouseY>=20&&mouseY<=80){
      System.out.println("settag button is clicked");
      gameStatus.curLevel = Level.LEVEL_SET;
      return;
    }
    //if(isMouseInButtonLAN()){
    //  gameStatus.curLevel = Level.LEVEL_LOGIN;
    //  isLogin = true;
    //  return;
    //}
     if(isMouseInButtonStory()){
      gameStatus.curLevel = Level.LEVEL_STORY;
      return;
    }
  }
  
  if(gameStatus.curLevel==Level.LEVEL_END){
     if(mouseX>=458&&mouseX<=700&&mouseY>=521&&mouseY<=566){
       gameStatus.curLevel = Level.LEVEL_BEGIN;
       return;
     }
  }
  
  if(gameStatus.curLevel==Level.LEVEL_MAP1){
    
  }
  
  if(gameStatus.curLevel==Level.LEVEL_STORY){
    if(mouseX>=445&&mouseX<=600&&mouseY>=580&&mouseY<=630){
       gameStatus.curLevel = Level.LEVEL_TOTURIAL;
       return;
     }
  }
  
   if(gameStatus.curLevel==Level.LEVEL_TOTURIAL){
    if(mouseX>=464&&mouseX<=700&&mouseY>=540&&mouseY<=600){
       gameStatus.curLevel = Level.LEVEL_BEGIN;
       return;
     }
  }
  
  if(gameStatus.curLevel==Level.LEVEL_LANBATTLE){
      
  }
  
  if(gameStatus.curLevel==Level.LEVEL_BEGIN&&isMouseInButtonToturial()){
    gameStatus.curLevel = Level.LEVEL_RANK;
       System.out.println("rank button is clicked");
  }
  if(gameStatus.curLevel==Level.LEVEL_RANK){
    if(mouseX>=425&&mouseX<=732&&mouseY>=525&&mouseY<=578){
      gameStatus.curLevel = Level.LEVEL_BEGIN;
      return;
    }
  }
  
  if(gameStatus.curLevel==Level.LEVEL_SET){
    if(mouseX>=476&&mouseX<=677&&mouseY>=490&&mouseY<=590){
      gameStatus.curLevel = Level.LEVEL_BEGIN;
      return;
    }
   }
   if(gameStatus.curLevel==Level.LEVEL_END2){
     if(mouseX>=455&&mouseX<=700&&mouseY>=530&&mouseY<=600){
        gameStatus.curLevel = Level.LEVEL_BEGIN;
        return;
     }
   }
   if(gameStatus.curLevel==Level.LEVEL_ROGUE){
     if(mouseX>=220&&mouseX<=420&&mouseY>=170&&mouseY<=490){
        gameStatus.curLevel = Level.LEVEL_MAP1;
        rogue.trigger(rogue.options[0]);
        return;
     }
      if(mouseX>=468&&mouseX<=663&&mouseY>=170&&mouseY<=490){
        gameStatus.curLevel = Level.LEVEL_MAP1;
        rogue.trigger(rogue.options[1]);
        return;
     }
      if(mouseX>=716&&mouseX<=910&&mouseY>=170&&mouseY<=490){
        gameStatus.curLevel = Level.LEVEL_MAP1;
        rogue.trigger(rogue.options[2]);
        return;
     }
   }
   
}

boolean isMouseInButtonLAN(){
  return mouseX>=width/2-150 && mouseX<=width/2+150 && mouseY>=height/1.4-75 && mouseY<=height/1.4;
}

boolean isMouseInButtonStory(){
  return mouseX>=width/2-150 && mouseX<=width/2+150 && mouseY>=height/1.4-75 && mouseY<=height/1.4;
}

boolean isMouseInButtonStart(){
  return mouseX>=width/2-150 && mouseX<=width/2+150 && mouseY>=height/1.4-150 && mouseY<=height/1.4-75;
}

boolean isMouseInButtonSet(){
  return mouseX>=width/2-150 && mouseX<=width/2+200 && mouseY>=height/1.4+75 && mouseY<=height/1.4+150;
}

boolean isMouseInButtonToturial(){
  return mouseX>=width/2-150 && mouseX<=width/2+200 && mouseY>=height/1.4 && mouseY<=height/1.4+75;
}
****End of MouseClickedEvent.pde****
MoveObject.pde 
import java.io.*;
abstract class MoveObject implements Serializable{
  public PImage image; 
  public PImage[] images;
  public int curImageIndex;
  public int curX;
  public int curY;
  public int prevX;
  public int prevY;
  public int speed;
  public int sizeX;
  public int sizeY;
  public boolean isVisiable = false;
  
  
  public JSONObject toJSONObject(){
    JSONObject obj = new JSONObject();
    obj.setInt("curX",curX);
    obj.setInt("curY",curY);
    obj.setInt("prevX",prevX);
    obj.setInt("prevY",prevY);
    obj.setInt("speed",speed);
    obj.setBoolean("isVisiable",isVisiable);
    return obj;
  }
    
  public void move(){
    prevX = curX;
    curX+=speed;
  };

  public void drawAnimation(int x,int y,int imageWidth,int imageHeight,int delayTime){
    //int now = millis();
    for(int i=0;i<images.length;){
      image(images[i],x,y,imageWidth,imageHeight);
      
      //while(millis()-now<50){
      //}
      i++;
    }
  }
  
  public PImage getImage() {
    return image;
  }

  public void setImage(PImage image) {
    this.image = image;
  }
  
  public PImage[] getImages() {
    return images;
  }

  public void setImages(String[] urls) {
      for(int i=0;i<urls.length;i++){
        images[i]=loadImage(urls[i]);
      }
  }
  
  public int getCurX() {
    return curX;
  }

  public void setCurX(int curX) {
    this.curX = curX;
  }

  public int getCurY() {
    return curY;
  }

  public void setCurY(int curY) {
    this.curY = curY;
  }

  public int getPrevX() {
    return prevX;
  }

  public void setPrevX(int prevX) {
    this.prevX = prevX;
  }

  public int getPrevY() {
    return prevY;
  }

  public void setPrevY(int prevY) {
    this.prevY = prevY;
  }

  public int getSpeed() {
    return speed;
  }

  public void setSpeed(int speed) {
    this.speed = speed;
  }

  public boolean isVisiable() {
    return isVisiable;
  }

  public void setVisiable(boolean visiable) {
    isVisiable = visiable;
  }

  public boolean isOutOfBound(){
    return false;
  };
  

}
****End of MoveObject.pde****
MyRunnable.pde 
class MyRunnable implements Runnable{
  @Override
  public void run(){
      //init ButtonImage
    buttonImage = new ButtonImage();
    
    //init BackgroundImage
    backgroundImage = new BackgroundImage();
    
    //init gameName
    gameName = loadImage("miracle.png");
    
    //init gif 
    gif = new Gif(sketch,"background_start2.gif");
    //backgroundStart = loadImage("background_start.gif");
    
    //init bgm
    //minim = new Minim(this);
    playerLevelBegin = minim.loadFile(Bgm.bgmLevelBegin);
    playerLevelSet = minim.loadFile(Bgm.bgmLevelBegin);
    playerLevelMap1 = minim.loadFile(Bgm.bgmLevelMap1);
    playerBullet1 = minim.loadFile(Bgm.bgmBullet1);
    //playerStart = minim.loadFile(Bgm.bgmStart);
    playerClick = minim.loadFile(Bgm.bgmClick);
        //init setPanel
    setPanel = new SetPanel();
    
    //init gameLevel1
    gameLevel1 = new GameLevel1();
    gameLevel2 = new GameLevel2();
    gameLevelLAN = new GameLevelLAN();
    
    //init gameModeChoose;
    mcPanel = new ModeChoosePanel();
    
    //client
    client = new Client();
    try{
       InetAddress localhost = InetAddress.getLocalHost();
       ip = localhost.getHostAddress();
    }catch (UnknownHostException e) {
       e.printStackTrace();
    }
  }
}
****End of MyRunnable.pde****
Player.pde 
class Player implements Serializable{
    public Helicopter helicopter = new Helicopter("helicopter.png",0,width/4,3,15);
    
    public void destroyCopter(){ }
    //public Lazor lazor = new Lazor();
    //public ScorePanel scorePanel = new ScorePanel();
    //public AbilityBox[] boxs = new AbilityBox[3];
    public boolean isGameEnd = false;
    
    public JSONObject toJSONObject(){
      JSONObject obj = new JSONObject();
      //JSONObject[] objsAbilityBox=  new JSONObject[3];
      //int i = 0;
      //for(AbilityBox box:boxs){
      //  objsAbilityBox[i] = box.toJSONObject(); 
      //  obj.setJSONObject("box"+i,objsAbilityBox[i]);
      //  i++;
      //}
      obj.setJSONObject("helicopter",helicopter.toJSONObject());
      //obj.setJSONObject("lazor",lazor.toJSONObject());
      //obj.setJSONObject("scorePanel",scorePanel.toJSONObject());
      obj.setBoolean("isGameEnd",isGameEnd);
      return obj;
    }
    
 
}
****End of Player.pde****
Player1.pde 
class Player1 extends Player{
  
}
****End of Player1.pde****
Player2.pde 
class Player2 extends Player{
  

}
****End of Player2.pde****
ProtocolDataFormat.pde 
class ProtocolDataFormat implements Serializable{
  public Player player;
  //public PublicSource publicSource;
  public String ip;
  public void setData(Player player, PublicSource publicSource, String ip){
    this.player = player;
    //this.publicSource = publicSource;
    this.ip = ip;
  }
  public JSONObject toJSONObject(){
    JSONObject obj = new JSONObject();
    obj.setJSONObject("player",player.toJSONObject());
    //obj.setJSONObject("publicSource",publicSource.toJSONObject());
    obj.setString("ip",ip);
    return obj;
  }
}
****End of ProtocolDataFormat.pde****
PublicSource.pde 
class PublicSource implements Serializable{
    public final GoldCoin[] coins = new GoldCoin[10];
    public final Ufo[] ufos = new Ufo[5];
    
    public JSONObject toJSONObject(){
      JSONObject obj = new JSONObject();
      int i = 0;
      JSONObject[] objsCoins = new JSONObject[10];
      for(GoldCoin coin:coins){
        objsCoins[i] = coin.toJSONObject();
        obj.setJSONObject("coin"+i, objsCoins[i]);
        i++;
      }
      
      i = 0;
      JSONObject[] objsUfos = new JSONObject[10];
      for(Ufo ufo:ufos){
        objsUfos[i] = ufo.toJSONObject();
        obj.setJSONObject("ufo"+i, objsUfos[i]);
        i++;
      }
      return obj;
    }
}
****End of PublicSource.pde****
Rogue.pde 
class Rogue{
  int[] options = new int[3];
  int maxCount = 4;
  String intro = "Make Your Decision!";
  PImage lifePlus = loadImage("health_plus.png"); //0
  PImage timeSlow = loadImage("time_slower.png"); //1
  PImage doubleScore = loadImage("double_score.png"); //2
  PImage unlimitedPower = loadImage("power_unlimited.png"); //3
  
  public Rogue(){
    initOption();
  }
  
  private void initOption(){
    HashSet<Integer>set = new HashSet<>();
    while(set.size()!=3){
      int num = (int)random(maxCount);
      set.add(num);
    }
    int i=0;
    for(int c:set){
      options[i++] = c;
    }
  }
  
  public PImage getImageByNum(int i){
    switch(i){
      case 0: return lifePlus;
      case 1: return timeSlow;
      case 2: return doubleScore;
      case 3: return unlimitedPower;
      default: return lifePlus;
    }
  }
  
  public void draw(){
    for(int i=0;i<3;i++){
      PImage image = getImageByNum(options[i]);
      textAlign(CENTER);
      textSize(50);
      text(intro,width/2,150);
      imageMode(CENTER);
      image(image,width/2-200-50+i*250,330,200,300);
    }
  }
  
  public void trigger(int i){
     switch(i){
      case 0: if(gameLevel1.helicopter.health<=2) gameLevel1.helicopter.health++;
              break;
      case 1: gameLevel1.slowTime();
              break;
      case 2: gameLevel1.scorePanel.score*=2;
              break;
      case 3: gameLevel1.shield.startBonusShield(millis());

    }
  
  }
}
****End of Rogue.pde****
ScorePanel.pde 
public class ScorePanel extends FixedObject implements Serializable{
   public int score;
   public int goldCount;
   public int time;
   public int killCount;
      
   public void updateScore(){
     score++;
   }
}
****End of ScorePanel.pde****
SetPanel.pde 
public class SetPanel{
  private final PImage setPanel = loadImage("setting.png");
  private final PImage diffPointer = loadImage("diffPointer.png");
  private final PImage volumePointer = loadImage("volumePointer.png");
  public int volumePointerX = 551;
  public int volumePointerY = 230;
  public int diffPointerX = 360;
  public int diffPointerY = 365;
  public void createPanel(){
    imageMode(CENTER);
    image(setPanel,width/2,height/2,700,700);
    imageMode(CORNER);
    image(volumePointer,volumePointerX,volumePointerY,40,40);
    image(diffPointer,diffPointerX,diffPointerY,50,50);
  }
}
****End of SetPanel.pde****
Shield.pde 
class Shield{
  PImage image = loadImage("shield.png");
  boolean isVisible = false;
  private int startTime;
  private int shieldLife = 15000;
  private boolean bonusShieldInUse = false;
  
  public void showShield(){
    isVisible = true;
  }
  
  public void closeShield(){
    isVisible = false;
    bonusShieldInUse = false;
  }
  
  public void startBonusShield(int start) {
  this.bonusShieldInUse = true;
  this.startTime = start;
  showShield();
}
  
  public int getStartTime() {return this.startTime;}
  
  public int getShieldLife() {return this.shieldLife;}
  
  public boolean isBonusShieldInUse() {return this.bonusShieldInUse;}
  
  public void setbonusShieldInUse(boolean inUse) {this.bonusShieldInUse = inUse;}
}
****End of Shield.pde****
Spaceship.pde 
class Spaceship extends MoveObject{
  
  int time = millis();
  public Spaceship(){
    image = loadImage("spaceship1.png");
    speed = 3;
    curX = -50;
    curY = height/2;
  }
  
  
  void update() {
    curX += speed;
    if(!isAnimationEnd){
      time = millis();
    }
    if (curX > width + 50 || isAnimationEnd) { 
      isAnimationEnd = true;
      curX = -100;
      speed = 0;
      if(isAnimationEnd && millis()-time>=3000){
        gameStatus.curLevel = Level.LEVEL_BEGIN;
      }
    }
  }
  
  void display() {
    fill(255);
    image(image, curX - 20, curY + 40, 100, 100);
  }
  
}
****End of Spaceship.pde****
Star.pde 
class Star {
  float x;
  float y;
  float speed;
  boolean visible; 
  int rColour;
  int gColour;
  int bColour;
  Star() {
    x = random(width);
    y = random(height);
    speed = random(0.1, 0.5);
    visible = true; 
    rColour = (int)random(256);
    gColour = (int)random(256);
    bColour = (int)random(256);
  }
  
  void update() {
    y += speed;
    if (y > height) {
      y = 0;
      x = random(width);
      visible = true; 
    }
  }
  
  void display() {
    if (visible) { 
      noStroke();
      fill(rColour,gColour,bColour);
      ellipse(x, y, 5, 5);
    }
  }
  
  void hide() {
    visible = false; 
  }
}

void drawWelcomeText() {
  fill(255);
  textAlign(CENTER, CENTER);
  float textWidth = textWidth(welcomeText);
  float targetWidth = min(textWidth, width);
  float currentWidth = min(frameCount * textExpandSpeed, targetWidth);
  String currentText = welcomeText.substring(0, int(currentWidth / textWidth * welcomeText.length()));
  text(currentText, width/2, height/2 - 50);
}

boolean textFullyExpanded() {
  float textWidth = textWidth(welcomeText);
  float targetWidth = min(textWidth, width);
  float currentWidth = min(frameCount * textExpandSpeed, targetWidth);
  return currentWidth >= targetWidth;
}

void move(int[][] targetMap){
  float spacing = 15;
  float startX = 300+width / 4 - (targetMap[0].length * spacing) / 2;
  float startY = height / 2 - (targetMap.length * spacing) / 2;
   
  for (int i = 0; i < numStars; i++) {
    if (!usedStars[i]) {
      int row = i / targetMap[0].length;
      int col = i % targetMap[0].length;
      if (row < targetMap.length && col < targetMap[0].length && targetMap[row][col] == 1) {
        float targetX = startX + col * spacing;
        float targetY = startY + row * spacing;
        float dx = targetX - stars[i].x;
        float dy = targetY - stars[i].y;
        stars[i].x += dx * 0.05;
        stars[i].y += dy * 0.05;
        usedStars[i] = true;
      }
    }
  }
}

void updateToTarget() {
  int[][] targetMap = {
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1 ,0, 0, 0, 0, 0, 1 ,1, 1, 1},
    {1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0, 1 ,0, 0, 0},
    {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0, 1 ,1, 1, 1},
    {1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0, 1 ,0, 0, 0},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1 ,1, 1, 1, 0, 0, 1 ,1, 1, 1},
  };
  
  for (int i = 0; i < numStars; i++) {
    usedStars[i] = false; 
  }
  move(targetMap);

  for (int i = 0; i < numStars; i++) {
    if (!usedStars[i]) {
      stars[i].hide();
    }
  }
}

void drawStartAni(){
  
  if (!starsFormingMiracle) {
    for (int i = 0; i < numStars; i++) {
      stars[i].update();
      stars[i].display();
    }
  } else {
    updateToTarget(); 
    for (int i = 0; i < numStars; i++) {
      stars[i].display();
    }
  }
  
  if (textVisible) {
    textSize(50);
    drawWelcomeText();
  }
  
  if (textFullyExpanded() && !gameStarted) {
    fill(255);
    textAlign(CENTER, CENTER);
    textSize(40);
    text(startText, width/2, height/2 + 50);
  }
  
  if (gameStarted) {
    spaceship.update();
    spaceship.display();
  }
}
****End of Star.pde****
Story.pde 
public class Story{
  private final PImage storyPanel = loadImage("StoryImage.png");
  private final PImage toturialPanel = loadImage("control-screen.png");
  public void createPanel(){
    imageMode(CENTER);
    if(gameStatus.curLevel==Level.LEVEL_STORY){
      image(storyPanel,width/2,height/2,width,height);
    }else{
      image(toturialPanel,width/2,height/2,width,height);
    }
  }
}
****End of Story.pde****
ToturialPanel.pde 
class ToturialPanel{
  PImage image = loadImage("story.png");
  PImage rank = loadImage("rank.png");
  String[] story = {"this is our story","my story"};
  int currentLineIndex = 0;
  int currentCharacterIndex = 0;
  public void createPanel(){
    imageMode(CORNER);
    image(image,0,0,width,height);
    imageMode(CENTER);
    image(rank,width/2,height/2,900,700);
    fill(255);
    textSize(50);
    
    //read highest score from txt
    var list = gameLevel1.readHighestScoreFromTxt("score.txt");
    for(int i=0;i<list.size();i++){
      text(list.get(i),519,191+i*75);
    }
  //  textSize(32);
  //  textAlign(LEFT, TOP);
  //  for (int i = 0; i <= currentLineIndex; i++) {
  //   String line = story[i];
  //  if (i < currentLineIndex) {
  //    text(line, 20, 20 + i * 40);
  //  } else {
  //    String subString = line.substring(0, currentCharacterIndex);
  //    text(subString, 20, 20 + i * 40);
  //  }
  //}
  
  //  if (currentLineIndex < story.length) {
  //    String currentLine = story[currentLineIndex];
  //    if (currentCharacterIndex < currentLine.length()) {
  //      currentCharacterIndex++;
  //    } else {
  //      currentLineIndex++;
  //      currentCharacterIndex = 0;
  //    }
  //  }
  }  
}
****End of ToturialPanel.pde****
Ufo.pde 

class Ufo extends MoveObject{
   private int speedY = 5;
   public Explode explode = new Explode();
   public boolean isDestoryed = false;
   private int asteroidRange;
   public Ufo(int asteroidBeltRange){
     //old ui
     //PImage image = loadImage("ufo.png");
     asteroidRange = asteroidBeltRange;
     images = new PImage[3];
     for(int i=0;i<images.length;i++){
       images[i] = loadImage("ufo"+(i+1)+".png");
     }
     curImageIndex = (int)random(images.length);
     speed = 15;
     setImage(images[curImageIndex]);
   }
   
   @Override
    public void move(){
        if(curX < 0 || !this.isVisiable){
        curImageIndex = (int)random(images.length);
        setImage(images[curImageIndex]);
        curX = width+(int)(random(500)*random(2));
        //curY = (int)random(height-100);
        curY = getYAxisWithinAsteroidBelts();
      }else if(isOutOfBound()){
        speedY = -speedY;
        curX -= speed;
        curY += speedY;
      }else{
        curX -= speed;
        curY += speedY;
      }
    }
   

  @Override
  public boolean isOutOfBound(){
    if(curX <= 0 ||curY <= asteroidRange + 50 ||curY+100 >= height - asteroidRange - 50){
      return true;
    }
    return false;
  }
  
  public int getYAxisWithinAsteroidBelts() {
    return (int)random(asteroidRange+200,height-200 - asteroidRange);
  }
  
  
}
****End of Ufo.pde****
